wb = xlsx_package.workbook

# Styles
# Sadly axlsx_rails doesn't support a yield or partial for this
h1 = wb.styles.add_style(\
  bg_color: "004586", \
  sz: 12, \
  border: {style: :thin, color: "000000"}, \
  alignment: {horizontal: :center, vertical: :center}
  )
data = wb.styles.add_style(\
  sz: 12, \
  border: {style: :thick, color: "000000"}, \
  alignment: {horizontal: :center, vertical: :center}
  )

high_use_dxf = wb.styles.add_style(bg_color: "ff0000", type: :dxf)
mid_use_dxf = wb.styles.add_style(bg_color: "ffff00", type: :dxf)
low_use_dxf = wb.styles.add_style(bg_color: "008000", type: :dxf)
high_use = wb.styles.add_style(b: true, bg_color: "ff0000", border: {style: :thin, color: "000000"}, alignment: {horizontal: :center, vertical: :center})
mid_use = wb.styles.add_style(b: true, bg_color: "ffff00", border: {style: :thin, color: "000000"}, alignment: {horizontal: :center, vertical: :center})
low_use = wb.styles.add_style(b: true, bg_color: "008000", border: {style: :thin, color: "000000"}, alignment: {horizontal: :center, vertical: :center})

legend = wb.styles.add_style(b: true, alignment: {horizontal: :center, vertical: :center})
# End styles

wb.add_worksheet(name: "General") do |sheet|
  # Headers
  sheet.add_row ["Servicio/Plataforma", "Capacidad Total", "Servicios Activos", "Servicios Disponibles", "% en Uso", "% Disponibilidad", "Servicios Comprometidos"], style: h1
    
  # Fill cells with data
  sheet.add_row ["Direcciones IP Públicas", @ip_count[:max], @ip_count[:used], @ip_count[:free], two_decimal_amount(@ip_count[:used_percent], '.'), two_decimal_amount(@ip_count[:free_percent], '.'), 0], style: data

  # Leyend
  sheet.add_row [nil, "Utilización"], style: legend
  sheet.add_row [nil, "81%-100%", "61%-80%", "<= 60%"], style: [nil, high_use, mid_use, low_use]


  # Formatting and styling
  sheet.add_conditional_formatting("E2:E2", { :type => :cellIs, :operator => :lessThan, :formula => "61", :dxfId => low_use_dxf, :priority => 1 })
  sheet.add_conditional_formatting("E2:E2", { :type => :cellIs, :operator => :lessThan, :formula => "81", :dxfId => mid_use_dxf, :priority => 1 })
  sheet.add_conditional_formatting("E2:E2", { :type => :cellIs, :operator => :greaterThanOrEqual, :formula => "81", :dxfId => high_use_dxf, :priority => 1 })

  sheet.merge_cells("B3:D3")
end

render 'network', locals: {wb: wb, subnets: @subnets}
